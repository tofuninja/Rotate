package com.example.rotate;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

import android.util.Log;

public class gameBoard 
{
	public gamePiece[][] array;
	public int w;
	public int h;
	private gamePiece end;
	private gamePiece start;
	private Random rand;
	
	public gameBoard(int width, int height)
	{
		w = width;
		h = height;
		array = new gamePiece[w][h];
		rand = new Random();
		
		for(int i = 0; i < w; i++)
		{
			for(int j = 0; j < h; j++)
			{
				array[i][j] = new gamePiece(0,0,i,j);
			}
		}
		
		start = new gamePiece(0, 0, 0, -1);
		end = new gamePiece(0, 0, w - 1, h);
		boolean b = dfsMaze(array[0][0], start);
		if(b == false) Log.e("ROTATE", "Some how did not find end... thats not right...");
	}
	
	private boolean dfsMaze(gamePiece node, gamePiece preNode)
	{
		if(node == end) return true;
		
		ArrayList<gamePiece> neigh = getNeighbors(node);
		Collections.shuffle(neigh);
		
		node.marked = true;
		gamePiece nextNode = null;
		
		// Check all neighbors to see if they lead to the end... 
		for(gamePiece p: neigh)
		{
			boolean found = dfsMaze(p, node);
			if(found)
			{
				nextNode = p;
			}
		}
		
		
		// didnt find end
		if(nextNode == null) 
		{
			node.type = rand.nextInt(2);
			node.rotation = rand.nextInt(4);
			return false;
		}
		
		// found end.. construct path to end
		if(preNode.X == nextNode.X || preNode.Y == nextNode.Y)
			node.type = 0;
		else
			node.type = 1;
		
		node.rotation = rand.nextInt(4);
		return true;
	}
	
	private ArrayList<gamePiece> getNeighbors(gamePiece p)
	{
		ArrayList<gamePiece> arr = new ArrayList<gamePiece>();
		
		gamePiece top = getPiece(p.X, p.Y - 1);
		gamePiece right = getPiece(p.X + 1, p.Y);
		gamePiece bot = getPiece(p.X, p.Y + 1);
		gamePiece left = getPiece(p.X - 1, p.Y);
		
		if(top   != null && top.marked   == false) arr.add(top);
		if(right != null && right.marked == false) arr.add(right);
		if(bot   != null && bot.marked   == false) arr.add(bot);
		if(left  != null && left.marked  == false) arr.add(left);
		
		return arr;
	}
	
	
	public boolean setPiece(int x, int y, gamePiece p)
	{
		array[x][y] = p;
		// verify board solved 
		return false;
	}
	
	public gamePiece getPiece(int x, int y)
	{
		if(x == 0 && y == -1)
			return start;
		else if(x == w-1 && y == h) 
			return end;
		else if(x >= 0 && x < w && y >= 0 && y < h)
			return array[x][y];
		else 
			return null;
	}
	
}

class gamePiece
{
	public int type;
	public int rotation;
	public boolean marked = false;
	public int X;
	public int Y;
	public gamePiece(int t, int r, int x, int y)
	{
		type = t;
		rotation = r;
		X = x;
		Y = y;
	}
}